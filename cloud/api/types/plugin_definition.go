// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PluginDefinition A Containership plugin definition
// swagger:model PluginDefinition
type PluginDefinition struct {

	// The implementation of the type of plugin
	// Required: true
	Implementation *string `json:"implementation"`

	// The type of plugin
	// Required: true
	Type *string `json:"type"`

	// The version compatibility definition
	// Required: true
	Versions []*PluginVersion `json:"versions"`
}

// Validate validates this plugin definition
func (m *PluginDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImplementation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PluginDefinition) validateImplementation(formats strfmt.Registry) error {

	if err := validate.Required("implementation", "body", m.Implementation); err != nil {
		return err
	}

	return nil
}

func (m *PluginDefinition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PluginDefinition) validateVersions(formats strfmt.Registry) error {

	if err := validate.Required("versions", "body", m.Versions); err != nil {
		return err
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PluginDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PluginDefinition) UnmarshalBinary(b []byte) error {
	var res PluginDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
