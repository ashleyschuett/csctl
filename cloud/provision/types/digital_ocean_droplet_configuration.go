// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DigitalOceanDropletConfiguration Configuration for a DigitalOcean droplet
// swagger:model DigitalOceanDropletConfiguration
type DigitalOceanDropletConfiguration struct {

	// Enable droplet backups if true
	Backups bool `json:"backups,omitempty"`

	// Image to use for droplet
	// Required: true
	Image *string `json:"image"`

	// Enable monitoring for droplet
	Monitoring bool `json:"monitoring,omitempty"`

	// Enable private networking for droplet
	// Required: true
	PrivateNetworking *bool `json:"private_networking"`

	// Region for this droplet
	// Required: true
	Region *string `json:"region"`

	// Droplet size
	// Required: true
	Size *string `json:"size"`
}

// Validate validates this digital ocean droplet configuration
func (m *DigitalOceanDropletConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DigitalOceanDropletConfiguration) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *DigitalOceanDropletConfiguration) validatePrivateNetworking(formats strfmt.Registry) error {

	if err := validate.Required("private_networking", "body", m.PrivateNetworking); err != nil {
		return err
	}

	return nil
}

func (m *DigitalOceanDropletConfiguration) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *DigitalOceanDropletConfiguration) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DigitalOceanDropletConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DigitalOceanDropletConfiguration) UnmarshalBinary(b []byte) error {
	var res DigitalOceanDropletConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
