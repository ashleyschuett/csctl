// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodePoolLabel node pool label
// swagger:model NodePoolLabel
type NodePoolLabel struct {

	// Timestamp at which the label was created
	CreatedAt string `json:"created_at,omitempty"`

	// Node pool label ID
	ID UUID `json:"id,omitempty"`

	// Label key
	// Required: true
	Key *string `json:"key"`

	// ID of the node pool this label belongs to
	NodePoolID UUID `json:"node_pool_id,omitempty"`

	// Timestamp at which the label was updated
	UpdatedAt string `json:"updated_at,omitempty"`

	// Label value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this node pool label
func (m *NodePoolLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodePoolLabel) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *NodePoolLabel) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *NodePoolLabel) validateNodePoolID(formats strfmt.Registry) error {

	if swag.IsZero(m.NodePoolID) { // not required
		return nil
	}

	if err := m.NodePoolID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("node_pool_id")
		}
		return err
	}

	return nil
}

func (m *NodePoolLabel) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodePoolLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePoolLabel) UnmarshalBinary(b []byte) error {
	var res NodePoolLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
