// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ScalingPolicy scaling policy
// swagger:model ScalingPolicy
type ScalingPolicy struct {

	// Scale down policy
	ScaleDown *ScalingPolicyConfiguration `json:"scale_down,omitempty"`

	// Scale up policy
	ScaleUp *ScalingPolicyConfiguration `json:"scale_up,omitempty"`
}

// Validate validates this scaling policy
func (m *ScalingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScaleDown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleUp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScalingPolicy) validateScaleDown(formats strfmt.Registry) error {

	if swag.IsZero(m.ScaleDown) { // not required
		return nil
	}

	if m.ScaleDown != nil {
		if err := m.ScaleDown.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scale_down")
			}
			return err
		}
	}

	return nil
}

func (m *ScalingPolicy) validateScaleUp(formats strfmt.Registry) error {

	if swag.IsZero(m.ScaleUp) { // not required
		return nil
	}

	if m.ScaleUp != nil {
		if err := m.ScaleUp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scale_up")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScalingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScalingPolicy) UnmarshalBinary(b []byte) error {
	var res ScalingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
