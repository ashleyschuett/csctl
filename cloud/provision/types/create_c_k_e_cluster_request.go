// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCKEClusterRequest Request to create (provision) a CKE cluster
// swagger:model CreateCKEClusterRequest
type CreateCKEClusterRequest struct {

	// List of label key/value pairs to add to cluster
	// Required: true
	Labels interface{} `json:"labels"`

	// List of plugins to add to cluster
	// Required: true
	Plugins CreateCKEClusterPlugins `json:"plugins"`

	// Provider credentials ID to use for provisioning
	// Required: true
	ProviderID UUID `json:"provider_id"`

	// Template ID to use for provisioning
	// Required: true
	TemplateID UUID `json:"template_id"`
}

// Validate validates this create c k e cluster request
func (m *CreateCKEClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateCKEClusterRequest) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

func (m *CreateCKEClusterRequest) validatePlugins(formats strfmt.Registry) error {

	if err := validate.Required("plugins", "body", m.Plugins); err != nil {
		return err
	}

	if err := m.Plugins.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("plugins")
		}
		return err
	}

	return nil
}

func (m *CreateCKEClusterRequest) validateProviderID(formats strfmt.Registry) error {

	if err := m.ProviderID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider_id")
		}
		return err
	}

	return nil
}

func (m *CreateCKEClusterRequest) validateTemplateID(formats strfmt.Registry) error {

	if err := m.TemplateID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("template_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCKEClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCKEClusterRequest) UnmarshalBinary(b []byte) error {
	var res CreateCKEClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
